#ifndef H_MYRPC_TCP_CLIENT_H
#define H_MYRPC_TCP_CLIENT_H

#include <boost/shared_ptr.hpp>
#include "inc/session.h"

namespace msgpack {
namespace myrpc {

class tcp_client {
public:
    tcp_client(const char* host, const char* service_name);
    ~tcp_client();

    inline callable call(const std::string& name);

    inline void notify(const std::string& name);

%def gen_func_decl()
%varlen_each do |gen|
    template <[%gen.template%]>
    inline callable call(const std::string& name,
			[%gen.args_const_ref%]);

    template <[%gen.template%]>
    inline void notify(const std::string& name,
			[%gen.args_const_ref%]);

%end
%end
%gen_func_decl()

protected:
    struct tcp_client_impl;
    boost::shared_ptr<tcp_client_impl> pimpl;
    boost::shared_ptr<myrpc::session> session;
};


inline callable tcp_client::call(const std::string& name)
{
    return session->call(name);
}

inline void tcp_client::notify(const std::string& name)
{
    session->notify(name);
}

%def gen_func_body()
%varlen_each do |gen|
template <[%gen.template%]>
inline callable tcp_client::call(const std::string& name,
            [%gen.args_const_ref%])
{
    return session->call(name, [%gen.params%]);
}

template <[%gen.template%]>
inline void tcp_client::notify(const std::string& name,
            [%gen.args_const_ref%])
{
    session->notify(name, [%gen.params%]);
}

%end
%end
%gen_func_body()

}  // namespace myrpc
}  // namespace msgpack

#endif // H_MYRPC_TCP_CLIENT_H
